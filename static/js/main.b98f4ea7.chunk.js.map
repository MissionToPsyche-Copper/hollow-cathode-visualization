{"version":3,"sources":["ProtoParticle.js","Galactic.js","Painter.js","PresMode.js","LearningMode.js","LandingPage.js","App.js","reportWebVitals.js","index.js"],"names":["xenon_particles_array","electron_particles_array","electronImage","Image","src","xenonImage","ionizedXenonImage","ProtoParticle","layer","x","y","vx","vy","ax","Math","floor","random","ay","r","particle_type","max_y","min_y","max_x","min_x","accelerating","this","ctx","canvas","max","width","min","height","console","error","vmax","vmin","radius","anime_key","interval","image","push","drawImage","temp_this","window","requestAnimationFrame","animate","cancelAnimationFrame","clearPath","clearRect","type","setImage","setAnimation","xenonEjectedAnimation","index","ionize","eject","log","length","setTimeout","draw_ionize","draw_eject","particle","draw","mmax_y","mmin_y","mmax_x","mmin_x","xenon0","xenonAnimation","startAnimation","limiti","i","pop","clearAnimation","electron0","electronAnimation","cathodeCSVText","Painter","layers","psyche_spacecraft","thruster_on","thruster_off","base_cathode","draw_csv_Base_Drawing","bind","getCanvasHeight","getCanvasWidth","XenonGeneratorKey","ElectronGeneratorKey","layer_number","getLayer","clearCanvas","startElectronGenerator","startXenonGenerator","spawn_rate","generateXenon","setInterval","new_spawn_rate","killXenonGenerator","clearInterval","generateElectron","killElectronGenerator","ionizeParticles","ejectParticles","isAuto","PresMode","props","canvas0","React","createRef","canvas1","canvas2","canvas3","canvas4","canvas5","canvas6","canvas7","nextButton_HandleClick","autoToggleButton_HandleClick","autoID","delay","state","deltastage","scene","canvas_height","document","getElementById","clientHeight","canvas_width","clientWidth","ctx0","current","getContext","ctx1","ctx2","ctx3","ctx4","ctx5","ctx6","ctx7","painter","scenarioRefresh","killAllElectron","killAllXenon","draw_csv_Heat_Insert","draw_csv_gas_feed","draw_csv_internal_plasma","draw_csv_keeper_electrode","draw_csv_eject_plasma","newdeltastage","newscene","setState","ReactDOM","render","id","style","visibility","ref","className","onClick","backButton_HandleClick","Component","HALL_THRUSTER_ON","promisify","require","LearningMode","HeatInsertToggle_HandleClick","GasFeedToggle_HandleClick","KeeperElectrodeToggle_HandleClick","nextButton_plasma_HandleClick","nextButton_eject_HandleClick","hallThrusterToggle_HandleClick","nextButton_hallThrusterToShell_HandleClick","nextButton_shellToLearningModeCore_HandleClick","nextButton_end_HandleClick","text","thrusterButtonText","elementId","display","onclick","hideElement","draw_Hall_Thruster_Off","showElement","draw_Hall_Thruster_On","draw_csv_Base_Drawing_guide","newScene","draw_csv_internal_plasma_off_gas_guide","draw_csv_internal_plasma_off_heat_guide","title","nextButton","nextButton_Accessible","classList","replace","add","innerText","alt","LandingPage","LearningMode_HandleClick","PresMode_HandleClick","hidden","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB"],"mappings":"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","file":"static/js/main.b98f4ea7.chunk.js","sourcesContent":["// particle variables\r\nvar xenon_particles_array = []; // array of all existing xenon particles\r\nvar electron_particles_array = []; // array of all existing electron particles\r\n\r\nconst electronImage = new Image();\r\nelectronImage.src = \"/images/electron.png\";\r\nconst xenonImage = new Image();\r\nxenonImage.src = \"/images/xenon.png\";\r\nconst ionizedXenonImage = new Image();\r\nionizedXenonImage.src = \"/images/ionized_xenon.png\";\r\n\r\nclass ProtoParticle {\r\n    ctx; // ctx element/layer the particle is drawn on, draw on this one\r\n    canvas; // canvas element/layer the particle is drawn on, use this to look at the properties of the canvas, don't draw on it\r\n    x; // int px, x position of center of particle\r\n    y; // int px, y position of center of particle\r\n    vx; // int px, x velocity\r\n    vy; // int px, y velocity\r\n    ax; // int px/tick^2, x acceleration\r\n    ay; // int px/tick^2, y acceleration\r\n    radius; // int px, radius of particle\r\n    color; // color string or hex string, color of particle\r\n    anime_key; // animation frame reference used to cancel this particle's animation, see this.startAnimation(), defaults to -1\r\n    animate; // animation function and logic (pathing, boundaries, physics, etc.)\r\n    interval; // essentially the rate defining how many times a second accelerations and forces are applied (delta time)\r\n    accelerating = true; // toggle application of accelerations (for testing purposes)\r\n\r\n\r\n\r\n\r\n\r\n    /**\r\n     * Constructor for particle object with 7 optional parameters and 1 mandatory parameter (layer)\r\n     *\r\n     * @param layer ctx element/layer to draw the particle on\r\n     * @param x int px, initial x position of center of particle, if set to -999: defaults to a random value between 26 and 800\r\n     * @param y int px, initial y position of center of particle, if set to -999: defaults to a random value between 26 and 400\r\n     * @param vx int px/tick, initial x velocity, if set to -999: defaults to a random integer between 0 and 5\r\n     * @param vy int px/tick, initial y velocity, if set to -999: defaults to a random integer between 0 and 5\r\n     * @param ax int px/tick^2, initial x acceleration, defaults to a random integer between 1 and 5  (optional)\r\n     * @param ay int px/tick^2, initial y acceleration, defaults to a random integer between 1 and 5  (optional)\r\n     * @param r int px, initial radius of particle, defaults to 15px  (optional)\r\n     * @param particle_type either 'electron' or 'xenon' or [(future addition)]\r\n     * @param max_y bounding box\r\n     * @param min_y bounding box\r\n     * @param max_x bounding box\r\n     * @param min_x bounding box\r\n     */\r\n    constructor(\r\n        layer,\r\n        x,\r\n        y,\r\n        vx,\r\n        vy,\r\n        ax = Math.floor(Math.random() * (5 - 1) + 1),\r\n        ay = Math.floor(Math.random() * (5 - 1) + 1),\r\n        r = 15,\r\n        particle_type,\r\n        max_y,\r\n        min_y,\r\n        max_x,\r\n        min_x\r\n    ) {\r\n        this.ctx = layer;\r\n        this.canvas = layer.canvas;\r\n\r\n\r\n        // x: randomize if default value\r\n        if(x === -999){\r\n            // default to a random x position between min and max\r\n            let max = layer.canvas.width;\r\n            let min = r + 1;\r\n            this.x = Math.floor(Math.random() * (max - min) + min);\r\n        } else {\r\n            this.x = x;\r\n        }\r\n\r\n        // y: randomize if default value\r\n        if(y === -999){\r\n            // default to a random x position between min and max\r\n            let max = layer.canvas.height;\r\n            let min = r + 1;\r\n            this.y = Math.floor(Math.random() * (max - min) + min);\r\n        } else {\r\n            this.y = y;\r\n        }\r\n\r\n        // x error checking\r\n        if(this.x > layer.canvas.width || this.x < 0){\r\n            console.error(\"invalid initial x coordinate of particle: \", this.x);\r\n        }\r\n        // y error checking\r\n        if(this.y > layer.canvas.height || this.y < 0){\r\n            console.error(\"invalid initial y coordinate of particle: \", this.y);\r\n        }\r\n\r\n\r\n        let vmax = 30;\r\n        let vmin = -30;\r\n\r\n        // vx: randomize if default value\r\n        if(vx === -999){\r\n            this.vx = (Math.floor(Math.random() * 30 +1) / 10 / 2);\r\n        } else {\r\n            this.vx = vx;\r\n        }\r\n\r\n        // vy: randomize if default value\r\n        if(vy === -999){\r\n            this.vy = (Math.floor(Math.random() * (vmax - vmin) + vmin) / 10 / 2);\r\n        } else {\r\n            this.vy = vy;\r\n        }\r\n\r\n        this.ax = ax;\r\n        this.ay = ay;\r\n        this.radius = r;\r\n        // this.color = color; // depreciated now that we have images from the artist\r\n        this.anime_key = -1; // key/reference to current animation frame, given by browser, defaults to -1\r\n        this.interval = 3/60;\r\n\r\n        this.max_y = max_y; // set bounding box // operates off of distance from axis\r\n        this.min_y = min_y; // set bounding box\r\n        this.max_x = max_x; // set bounding box\r\n        this.min_x = min_x; // set bounding box\r\n\r\n        this.particle_type = particle_type;\r\n\r\n        // classification\r\n        // add self to particles array\r\n        if(particle_type === 'electron'){\r\n            this.image = electronImage;\r\n            electron_particles_array.push(this);\r\n        } else if(particle_type === 'xenon'){\r\n            this.image = xenonImage;\r\n            xenon_particles_array.push(this);\r\n        } else {\r\n            this.image = 'none';\r\n            console.error(\"invalid particle_type: \", this.particle_type);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Definition of how a ProtoParticle should look\r\n     */\r\n    draw(){\r\n        // colored circle\r\n        // this.ctx.beginPath();\r\n        // this.ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, true);\r\n        // this.ctx.closePath();\r\n        // this.ctx.fillStyle = this.color;\r\n        // this.ctx.fill();\r\n\r\n        // proper image\r\n        this.ctx.drawImage(this.image, this.x, this.y, this.radius * 2, this.radius * 2)\r\n    }\r\n\r\n    /**\r\n     * Initialize/start this particle's rendering and animation.\r\n     */\r\n    startAnimation(){\r\n        // this.anime_key = window.requestAnimationFrame(animate);\r\n        let temp_this = this; // assign \"this\" (this particle) to a temporary variable so that it is defined when requestAnimationFrame calls it\r\n        this.anime_key = window.requestAnimationFrame(function() { temp_this.animate(temp_this) });\r\n    }\r\n\r\n    /**\r\n     * !logic error warning! you may be thinking of clearAnimation()\r\n     * Stop this particle's rendering and animation *WITHOUT erasing the last frame of it.*\r\n     */\r\n    stopAnimation(){\r\n        window.cancelAnimationFrame(this.anime_key);\r\n    }\r\n\r\n    /**\r\n     * !logic error warning! you may be thinking of stopAnimation()\r\n     * Stop this particle's rendering and animation *AND erase the last frame of it.*\r\n     */\r\n    clearAnimation(){\r\n        window.cancelAnimationFrame(this.anime_key);\r\n        this.clearPath();\r\n    }\r\n\r\n    /**\r\n     * Function for clearing the previous frame/particle before drawing the new/updated frame.\r\n     */\r\n    clearPath(){\r\n        // method 0 - clear path using grey particle, no visible edges on overlap but leaves a trail\r\n        // clear circle\r\n        // this.ctx.beginPath();\r\n        // this.ctx.arc(this.x, this.y, this.radius+1, 0, Math.PI * 2, true);\r\n        // this.ctx.closePath();\r\n        // this.ctx.fillStyle = 'grey';\r\n        // this.ctx.fill();\r\n\r\n        // method 1 - properly clear area as rectangle, visible edges on overlap\r\n        // clear circle\r\n        // this.ctx.clearRect(this.x - this.radius - 1, this.y - this.radius - 1, this.radius * 2 + 2, this.radius * 2 + 2);\r\n\r\n        // clear image\r\n        this.ctx.clearRect(this.x, this.y, this.radius * 2, this.radius * 2);\r\n    }\r\n\r\n    /**\r\n     * Sets the animation function\r\n     * @param animate (function)\r\n     */\r\n    setAnimation(animate){\r\n        this.animate = animate;\r\n    }\r\n\r\n    /**\r\n     * Input should be 'electron', 'xenon', 'ionized xenon', or 'none'\r\n     * @param type (string) string representing the particle type, is mapped to appropriate particle image\r\n     */\r\n    setImage(type){\r\n        if(type === 'electron'){\r\n            this.particle_type = 'electron';\r\n            this.image = electronImage;\r\n        } else if(type === 'xenon'){\r\n            this.particle_type = 'xenon';\r\n            this.image = xenonImage;\r\n        } else if(type === 'ionized xenon'){\r\n            this.particle_type = 'ionized xenon';\r\n            this.image = ionizedXenonImage;\r\n        } else if(type === 'none'){\r\n            this.particle_type = 'none';\r\n            console.error('ProtoParticle:: setImage: Invalid type provided: ', type);\r\n        } else {\r\n            this.particle_type = 'none';\r\n            console.error('ProtoParticle:: setImage: Invalid type provided: ', type);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Ionize yourself\r\n     */\r\n    ionize(){\r\n        // if is xenon\r\n        if(this.particle_type === 'xenon'){\r\n            // this.color = '#fff';\r\n            // this.radius += 1;\r\n            this.setImage('ionized xenon');\r\n            // this.vx = Math.floor(this.vx / 4);\r\n            // this.yx = Math.floor(this.yx / 4);\r\n        }\r\n        // if is electron\r\n        else if(this.particle_type === 'electron'){\r\n            // clone self?\r\n            // electron_particles_array.push(this); // not quite how you'd do it\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Eject yourself\r\n     */\r\n    eject(){\r\n        // if is xenon\r\n        if(this.particle_type === 'xenon' || this.particle_type === 'ionized xenon'){\r\n            this.max_x = this.canvas.width * 4;\r\n            this.setAnimation(ProtoParticle.xenonEjectedAnimation)\r\n        }\r\n        // if is electron\r\n        else if(this.particle_type === 'electron'){\r\n            // clone self?\r\n            // electron_particles_array.push(this); // not quite how you'd do it\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Ionizes the particle at xenon_particles_array[key]\r\n     * Essentially a wrapper for the call, this is needed since using setTimeout makes scoping issues\r\n     *\r\n     * @param index index in xenon_particles_array[]\r\n     */\r\n    static draw_ionize(index){\r\n        try {\r\n            xenon_particles_array[index].ionize();\r\n        } catch (error) {\r\n            // Expected error: TypeError\r\n            // This happens when a particle is deleted before it can ionize, this is normal (in presMode)\r\n        }\r\n\r\n    }\r\n\r\n    static draw_eject(index){\r\n        try {\r\n            xenon_particles_array[index].eject();\r\n        } catch (error) {\r\n            // Expected error: TypeError\r\n            // This happens when a particle is deleted before it can ionize, this is normal (in presMode)\r\n        }\r\n\r\n    }\r\n\r\n    static ionizeParticles(){\r\n        console.log(\"xenon_particles_array.length: \", xenon_particles_array.length)\r\n        // should avoid array usage here for efficiency\r\n        for (const index in xenon_particles_array) {\r\n            // should probably filter here instead of in this.ionize\r\n            setTimeout(ProtoParticle.draw_ionize, Math.random() * 3 * 1000, index); // random between 0 and 3 seconds\r\n        }\r\n    }\r\n\r\n    static ejectParticles(){\r\n        // should avoid array usage here for efficiency\r\n        for (const index in xenon_particles_array) {\r\n            // should probably filter here instead of in this.ionize\r\n            setTimeout(ProtoParticle.draw_eject, Math.random() * 0.5 * 1000, index); // random between 0 and 3 seconds\r\n        }\r\n    }\r\n\r\n    static xenonAnimation(particle){\r\n        particle.clearPath();\r\n\r\n        // set angled boundary box using a slope and a y-intercept\r\n        let m = 1; // slope\r\n        let b = 300; // y intercept\r\n\r\n        // check y boundary using normal bounding box\r\n        if (particle.y + particle.vy > particle.max_y - particle.radius * 2 || particle.y + particle.vy < particle.min_y ) {\r\n            particle.vy = -particle.vy;\r\n        }\r\n        // check x boundary using normal bounding box\r\n        else if (particle.x + particle.vx > particle.max_x - particle.radius * 2 || particle.x + particle.vx < particle.min_x) {\r\n            particle.vx = -particle.vx;\r\n        }\r\n        // check boundary using slope intercept form (doesn't account for square objects yet) (for squares, pov = top left instead of center)\r\n        else if((particle.y + particle.vy) >= m * (particle.x + particle.vx) + b){\r\n\r\n            // // do a proper angled bounce\r\n            // let swap = particle.vx;\r\n            // particle.vx = particle.vy;\r\n            // particle.vy = swap;\r\n\r\n        }\r\n\r\n        //move the particle at the given velocity\r\n        particle.x += particle.vx;\r\n        particle.y += particle.vy;\r\n\r\n        //draw the particle\r\n        particle.draw();\r\n\r\n        particle.anime_key = window.requestAnimationFrame(function() {particle.animate(particle)});\r\n    }\r\n    static xenonEjectedAnimation(particle){\r\n        particle.clearPath();\r\n\r\n        // set angled boundary box using a slope and a y-intercept\r\n        let m = 1; // slope\r\n        let b = 300; // y intercept\r\n\r\n        // check y boundary using normal bounding box\r\n        if (particle.y + particle.vy > particle.max_y - particle.radius * 2 || particle.y + particle.vy < particle.min_y ) {\r\n            particle.vy = -particle.vy;\r\n        }\r\n        // check x boundary using normal bounding box\r\n        else if (particle.x + particle.vx > particle.max_x - particle.radius * 2 || particle.x + particle.vx < particle.min_x) {\r\n            particle.vx = -particle.vx;\r\n        }\r\n        // check boundary using slope intercept form (doesn't account for square objects yet) (for squares, pov = top left instead of center)\r\n        else if((particle.y + particle.vy) >= m * (particle.x + particle.vx) + b){\r\n\r\n            // // do a proper angled bounce\r\n            // let swap = particle.vx;\r\n            // particle.vx = particle.vy;\r\n            // particle.vy = swap;\r\n\r\n        } else{\r\n            // acceleration is only applied here to prevent logic errors accelerating particles through collisions\r\n            // v_f = v_o + a*t (kinematic) (where t is the interval or intensity) (good values are like 1/60 or 5/60)\r\n\r\n            particle.ax = 5 * 10/particle.x; //keeper force (kqq/r)\r\n\r\n            if(particle.x > particle.canvas.width * 2){\r\n                // stop it from returning\r\n                particle.min_x = particle.canvas.width;\r\n            }\r\n\r\n            // y acceleration\r\n            particle.vy = particle.vy + (particle.ay * particle.interval);\r\n\r\n            // x acceleration\r\n            particle.vx = particle.vx + (particle.ax * particle.interval);\r\n        }\r\n\r\n        //move the particle at the given velocity\r\n        particle.x += particle.vx;\r\n        particle.y += particle.vy;\r\n\r\n        //draw the particle\r\n        particle.draw();\r\n\r\n        particle.anime_key = window.requestAnimationFrame(function() {particle.animate(particle)});\r\n    }\r\n\r\n    /**\r\n     * Generates a new xenon on a given layer at a given position\r\n     * @param ctx layer\r\n     * @param x initial x position\r\n     * @param y initial y position\r\n     * @param mmax_y bounding box\r\n     * @param mmin_y bounding box\r\n     * @param mmax_x bounding box\r\n     * @param mmin_x bounding box\r\n     */\r\n    static generateXenon(ctx, x, y, mmax_y, mmin_y, mmax_x, mmin_x){\r\n        // Drawing some particles //\r\n        let xenon0 = new ProtoParticle(ctx, x, y, -999, -999, 0, 0, 10, 'xenon', mmax_y, mmin_y, mmax_x, mmin_x); // randomized\r\n        xenon0.setAnimation(ProtoParticle.xenonAnimation);\r\n        xenon0.startAnimation();\r\n    }\r\n\r\n    static killAllXenon(){\r\n        let limiti = xenon_particles_array.length;\r\n        for (let i = 0; i < limiti; i++) {\r\n            (xenon_particles_array.pop()).clearAnimation();\r\n        }\r\n    }\r\n\r\n\r\n\r\n    static electronAnimation(particle){\r\n        particle.clearPath();\r\n\r\n        // set angled boundary box using a slope and a y-intercept\r\n        let m = 1; // slope\r\n        let b = 300; // y intercept\r\n\r\n        // check y boundary using slope intercept form\r\n        if (particle.y + particle.vy > particle.max_y - particle.radius * 2 || particle.y + particle.vy < particle.min_y) {\r\n            particle.vy = -particle.vy;\r\n        }\r\n        // check x boundary using normal bounding box\r\n        else if (particle.x + particle.vx > particle.max_x - particle.radius * 2 || particle.x + particle.vx < particle.min_x) {\r\n            particle.vx = -particle.vx;\r\n        }\r\n        // check boundary using slope intercept form (doesn't account for square objects yet) (for squares, pov = top left instead of center)\r\n        else if((particle.y + particle.vy) >= m * (particle.x + particle.vx) + b){\r\n\r\n            // // do a proper angled bounce\r\n            // let swap = particle.vx;\r\n            // particle.vx = particle.vy;\r\n            // particle.vy = swap;\r\n\r\n        } else if(particle.accelerating){\r\n            // acceleration is only applied here to prevent logic errors accelerating particles through collisions\r\n            // v_f = v_o + a*t (kinematic) (where t is the interval or intensity) (good values are like 1/60 or 5/60)\r\n\r\n            // y acceleration\r\n            particle.vy = particle.vy + (particle.ay * particle.interval);\r\n\r\n            // x acceleration\r\n            particle.vx = particle.vx + (particle.ax * particle.interval);\r\n        }\r\n\r\n        //move the particle at the given velocity\r\n        particle.x += particle.vx;\r\n        particle.y += particle.vy;\r\n\r\n        //draw the particle\r\n        particle.draw();\r\n\r\n        particle.anime_key = window.requestAnimationFrame(function() {particle.animate(particle)});\r\n    }\r\n\r\n    /**\r\n     * Generates a new xenon on a given layer at a given position\r\n     * @param ctx layer\r\n     * @param x initial x position\r\n     * @param y initial y position\r\n     * @param mmax_y bounding box\r\n     * @param mmin_y bounding box\r\n     * @param mmax_x bounding box\r\n     * @param mmin_x bounding box\r\n     */\r\n    static generateElectron(ctx, x, y, mmax_y, mmin_y, mmax_x, mmin_x){\r\n        // Drawing some particles //\r\n        let electron0 = new ProtoParticle(ctx, x, y, -999, -999, 0, 0, 6, 'electron', mmax_y, mmin_y, mmax_x, mmin_x); // randomized\r\n        electron0.setAnimation(ProtoParticle.electronAnimation);\r\n        electron0.startAnimation();\r\n    }\r\n\r\n    static killAllElectron(){\r\n        let limiti = electron_particles_array.length;\r\n        for (let i = 0; i < limiti; i++) {\r\n            (electron_particles_array.pop()).clearAnimation();\r\n        }\r\n    }\r\n\r\n    static setElectronBoundingBox(mmax_y, mmin_y, mmax_x, mmin_x){\r\n        // needs implemented\r\n        // for each particle in electron array, update these parameters\r\n    }\r\n\r\n    static setXenonBoundingBox(mmax_y, mmin_y, mmax_x, mmin_x){\r\n        // needs implemented\r\n        // for each particle in electron array, update these parameters\r\n    }\r\n}\r\n\r\n\r\nexport default ProtoParticle;\r\n","// Huy's Dimensions\r\nexport const canvas_height = 600; // becoming depreciated\r\nexport const canvas_width = 940; // becoming depreciated\r\n// Jack's Dimensions\r\n// export const canvas_height = 750; // becoming depreciated\r\n// export const canvas_width = 1600; // becoming depreciated\r\n\r\n/**\r\n * Mapping layers via constants\r\n * These should always be used to reference layers when used as parameters to a function or when interacting with this.state.\r\n * This allows us to easily add and remove layers.\r\n */\r\nexport const base = 0;              // ctx0 // scene[base]\r\nexport const heat = 1;              // ctx1 // scene[heat]\r\nexport const gas = 2;               // ctx2 // scene[gas]\r\nexport const plasma = 3;            // ctx3 // scene[plasma]\r\nexport const keeper = 4;            // ctx4 // scene[keeper]\r\nexport const eject = 5;             // ctx5 // scene[eject]\r\nexport const hallThrusterOff = 6;   // ctx6 // scene[hallThrusterOff]\r\nexport const hallThrusterOn = 7;    // ctx7 // scene[hallThrusterOn]\r\n\r\nexport const hallThrusterPrimaryText = \"The large circular component to the left is a Hall thruster. There are multiple of these on the spacecraft and they’re responsible for propelling the spacecraft through outer space. The Hall thruster produces thrust by ionizing particles and shooting them away from the spacecraft at incredibly high speeds.\"\r\n\r\nexport const hallThrusterSecondaryOnText = \"The particles are the Hall thruster's propellant. While particles are being stored, they are neutral, so they don't react with electric fields like magnets, and thus are easy to store. When the spacecraft needs to use gas particles, the spacecraft ionizes particles so that they can react to electromagnetic fields. The hall thruster generates an extremely strong magnetic field which attracts the particles from inside the thruster and shoots ions out and away from the spacecraft at hundreds of kilometers a second. This interaction is like trying to stick the wrong ends of two strong magnets together. \\n\" +\r\n    \"\\n\" +\r\n    \"The unit slightly above the Hall thruster is called a hollow cathode. It is responsible for supplying the hall thruster with the plasma needed to ionize its fuel. \\n\" +\r\n    \"\\n\" +\r\n    \"In order to ionize a particle, we need electrons or other ionized particles. For this, we need the hollow cathode. \"\r\nexport const hallThrusterSecondaryOffText = \"The particles are the Hall thruster's propellant. While particles are being stored, they are neutral, so they don't react with electric fields like magnets, and thus are easy to store. When the spacecraft needs to use gas particles, the spacecraft ionizes particles so that they can react to electromagnetic fields. The hall thruster generates an extremely strong magnetic field which attracts the particles from inside the thruster and shoots ions out and away from the spacecraft at hundreds of kilometers a second. This interaction is like trying to stick the wrong ends of two strong magnets together. \\n\" +\r\n    \"\\n\" +\r\n    \"The unit slightly above the Hall thruster is called a hollow cathode. It is responsible for supplying the hall thruster with the plasma needed to ionize its fuel. \\n\" +\r\n    \"\\n\" +\r\n    \"In order to ionize a particle, we need electrons or other ionized particles. For this, we need the hollow cathode. \"\r\n\r\nexport const cathodeShellPrimaryTitleText = \"This is a Hollow Cathode\"\r\nexport const cathodeShellPrimaryText = \"This is a hollow cathode; it has two main jobs when it comes to propelling the Psyche spacecraft. Its first job is to emit a stream of electrons which are then pulled in and trapped by the hall thruster’s magnetic fields and used to accelerate propellant in order to make thrust. \\n\" +\r\n    \"\\n\" +\r\n    \"The other job of the hollow cathode is to neutralize the ions ejected by the Hall thruster as they fly away from the spacecraft. \\n\" +\r\n    \"\\n\" +\r\n    \"Without the hollow cathode, when the Hall thruster emits plasma, the Hall thruster is negatively charging the entire rocket. This phenomenon can cause spacecraft erosion and reduce the thrust force. \\n\" +\r\n    \"\\n\" +\r\n    \"Ionized particles react to electromagnetic fields, so if allowed to move freely in space, they may end up sticking to other parts of the spacecraft or interfering with its sensors. Particles sticking to spacecraft can also cause erosion or even reduce the amount of thrust the hall thrusters generate, so this job is equally as important. As particles are ejected from the Hall thruster, the hollow cathode neutralizes them by emitting a stream of electrons and ionized xenon particles which neutralize particles leaving the hall thruster.\"\r\n\r\nexport const cathodeCSVTitleText = \"Now you can see Inside the Hollow Cathode\"\r\nexport const cathodeCSVText = \"The operation of the hollow cathode can be broken down into 3 main functions, which you can control via the buttons at the bottom right. These functions are labeled “toggle heater”, “toggle gas feed”, and “toggle keeper electrode”. You can enable and disable the three main operations for the hollow cathode by pressing the buttons below.  \\n\" +\r\n    \"\\n\" +\r\n    \"Our end goal is to get the hollow cathode fully operating again. To do this, we first need to make a hot plasma out of electrons and ionized xenon in the cathode tube and then eject it for the Hall thruster. To give a place to start, the cathode inserts are the most important component of the hollow cathode. \"\r\n\r\nexport const heatTitleText = \"Heating the Inserts\"\r\nexport const heatText = \"Heaters are coiled around the cathode tube and are responsible for heating up the cathode insert to extreme temperatures of at least at 1200 degrees Celsius (or 2192 degrees Fahrenheit). Heaters are surrounded by a heat shield to trap heat in and protect other electrical components from the extreme heat generated by the inserts. The insert is made of a special material which can emit electrons at high temperatures. The insert is placed inside of the hollow cathode and pushed against the orifice; it is labeled to the left.\";\r\n\r\nexport const gasTitleText2 = \"Turning on the Gas Feed\"\r\nexport const gasText = \"The role of the gas feed is to inject Xenon gas into the cathode tube. This Xenon is neutral, meaning it doesn’t react to electric or magnetic fields until the Xenon atom collides and gains electrons, becoming a negatively charged particle. This process is called ionization. Since Xenon becomes a negatively charged particle in this process, it can be attracted by positive voltage or magnetic field.\";\r\n\r\nexport const plasmaTitleText = \"Plasma Forms inside the Cathode Tube\"\r\nexport const plasmaText = \"The xenon gas injected near the insert is ionized by the emitted electrons to form an extremely hot plasma containing ions and more electrons.\";\r\n\r\nexport const keeperTitleText = \"The Keeper Electrode\"\r\nexport const keeperText = \"A positive voltage is placed on the keeper electrode, which pulls the electrons out of the orifice at the end of the cathode where they can then be used by the Hall thruster. \";\r\n\r\nexport const ejectTitleText = \"Ejecting Plasma via the Keeper Electrode\"\r\nexport const ejectText = \"The plasma is pushed out of the cathode tube. This hot plasma of ions and electrons neutralizes ions as they are ejected from the Hall thruster and many of the electrons are pulled into the Hall thruster and used to ionize its propellant. \";\r\n\r\nexport const recapTitleText = \"A Quick Recap\"\r\nexport const recapText = \"First, a heater heats the cathode insert until it begins to emit electrons. Next, gas is injected near the insert and is ionized by the emitted electrons to form a plasma of ions and even more electrons. Lastly, a positive voltage is placed on the keeper electrode, pulling the electrons particles out of the end of the cathode where they can then be used by the Hall thruster. The hollow cathode is a critical component of the Hall thruster as it provides electrons needed to ionize its propellant and also neutralizes the ionized propellant as it leaves the thruster such that it doesn’t negatively affect the spacecraft. \";\r\n\r\nexport const linksTitleText = \"Learn about Psyche!\"\r\nexport const linksText = \"Sample text for the links page\";\r\nexport const link1url = \"https://psyche.asu.edu/\";\r\nexport const link2url = \"https://psyche.asu.edu/\";\r\nexport const link3url = \"https://psyche.asu.edu/\";\r\n\r\nexport const heatKeeperErrorText = \" Heat Keeper Error Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\";\r\nexport const gasKeeperErrorText = \" Gas Keeper Error Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\";\r\n","import ProtoParticle from \"./ProtoParticle\";\r\n\r\n/**\r\n * Mapping layers via constants\r\n * These should always be used to reference layers when used as parameters to a function or when interacting with this.state.\r\n * This allows us to easily add and remove layers.\r\n */\r\nimport {\r\n    base,\r\n    canvas_height,\r\n    canvas_width,\r\n    eject,\r\n    gas,\r\n    hallThrusterOff,\r\n    hallThrusterOn,\r\n    heat,\r\n    keeper,\r\n    plasma\r\n} from \"./Galactic\";\r\n\r\n// const hallThruster_x = canvas_width / 4; // x coord of hall thruster image\r\n// const hallThruster_y = canvas_height / 4; // y coord of hall thruster image\r\n\r\n\r\n\r\n\r\nclass Painter{\r\n    constructor(layers) {\r\n        this.layers = layers;\r\n\r\n        // pre-load images\r\n        this.psyche_spacecraft = new Image();\r\n        this.psyche_spacecraft.src = \"/images/psyche_spacecraft.png\";\r\n        this.thruster_on = new Image();\r\n        this.thruster_on.src = \"/images/plasma_sample.jpg\";\r\n        this.thruster_off = new Image();\r\n        this.thruster_off.src = \"/images/HallThrusterMockup.png\";\r\n        this.base_cathode = new Image();\r\n        this.base_cathode.src = \"/images/base_cathode.png\";\r\n\r\n\r\n        this.draw_csv_Base_Drawing = this.draw_csv_Base_Drawing.bind(this);\r\n\r\n        this.getCanvasHeight = this.getCanvasHeight.bind(this);\r\n        this.getCanvasHeight = this.getCanvasHeight.bind(this);\r\n\r\n        // mounding box for cathode tube\r\n        // (measures are *from* the axis)\r\n        this.min_y = this.getCanvasHeight() * 0.39; // previous value: * 0.50 // previous value's size likely matches larger cathode, idr exactly, worth keeping\r\n        this.max_y = this.getCanvasHeight() * 0.49; // previous value: * 0.70\r\n        this.min_x = this.getCanvasWidth() * 0.20; // previous value: * 0.35\r\n        this.max_x = this.getCanvasWidth() * 0.35; // previous value: * 0.55\r\n\r\n        this.XenonGeneratorKey = -1;\r\n        this.ElectronGeneratorKey = -1;\r\n    }\r\n\r\n    /**\r\n     * Retrieves a layer by index (constant number)\r\n     * @param layer_number the number for the layer needed\r\n     * @returns {*} ctx reference/object for the layer\r\n     */\r\n    getLayer(layer_number){\r\n        return this.layers[layer_number];\r\n    }\r\n\r\n    getCanvasHeight(){\r\n        return this.getLayer(0).canvas.height;\r\n    }\r\n    getCanvasWidth(){\r\n        return this.getLayer(0).canvas.width;\r\n    }\r\n\r\n    /**\r\n     * clearCanvas(layer number)\r\n     * Clears contents of a given canvas layer\r\n     *\r\n     * @param layer_number layer number for layer to clear\r\n     */\r\n    clearCanvas(layer_number){\r\n        // this.getLayer(layer_number).clearRect(0, 0, canvas_width, canvas_height); // depends on canvas_width & canvas_height\r\n        this.getLayer(layer_number).clearRect(0, 0, this.getCanvasWidth(), this.getCanvasHeight()); // doesn't\r\n\r\n    }\r\n\r\n    /** Learning Mode */\r\n    /**\r\n     * Particle effect overlay to make the thruster and cathode appear to be on/operating\r\n     */\r\n    draw_Hall_Thruster_Off(){\r\n        // console.log(hallThrusterOff ,\" draw_Hall_Thruster_Off called\") //:debug\r\n\r\n        this.clearCanvas(hallThrusterOff);\r\n        const ctx = this.getLayer(hallThrusterOff);\r\n\r\n        // ctx.drawImage(this.thruster_off, hallThruster_x, hallThruster_y, this.thruster_off.width * 0.04, this.thruster_off.height * 0.04);\r\n    }\r\n\r\n    /**\r\n     * Particle effect overlay to make the thruster and cathode appear to be on/operating\r\n     */\r\n    draw_Hall_Thruster_On(){\r\n        // console.log(hallThrusterOn ,\" draw_Hall_Thruster_On called\") //:debug\r\n\r\n        this.clearCanvas(hallThrusterOn);\r\n        const ctx = this.getLayer(hallThrusterOn);\r\n\r\n        // ctx.drawImage(this.thruster_on, hallThruster_x, hallThruster_y, this.thruster_on.width, this.thruster_on.height);\r\n    }\r\n\r\n    /** Learning Mode and Presentation Mode */\r\n    /**\r\n     * draw_csv_Base_Drawing()\r\n     * Function to draw the base cathode visuals\r\n     */\r\n    draw_csv_Base_Drawing(){\r\n        // console.log(base ,\" draw_csv_Base_Drawing called\") //:debug\r\n\r\n        this.clearCanvas(base);\r\n        const ctx = this.getLayer(base);\r\n\r\n        // ctx.drawImage(this.base_cathode, 0, this.getCanvasHeight() * 0.25, this.base_cathode.width * 0.4, this.base_cathode.height * 0.4);\r\n        ctx.drawImage(this.base_cathode, 0, this.getCanvasHeight() * 0.25, this.getCanvasWidth() * 0.4, this.getCanvasHeight() * 0.4);\r\n        // ctx.drawImage(this.base_cathode, 0, 0, 300, 300);\r\n\r\n\r\n\r\n        // visualize cathode tube bounding box\r\n        // ctx.strokeStyle = 'rgba(255,255,255,0.6)';\r\n        // // ctx.fillStyle = 'rgba(194,62,62,0.3)';\r\n        // ctx.lineWidth = 6;\r\n        //\r\n        // // right\r\n        // ctx.beginPath();\r\n        // ctx.moveTo(this.min_x, this.min_y);\r\n        // ctx.lineTo(this.min_x, this.max_y);\r\n        // ctx.stroke();\r\n        //\r\n        // // left\r\n        // ctx.beginPath();\r\n        // ctx.moveTo(this.max_x, this.max_y);\r\n        // ctx.lineTo(this.max_x, this.min_y);\r\n        // ctx.stroke();\r\n        //\r\n        // // top\r\n        // ctx.beginPath();\r\n        // ctx.moveTo(this.max_x, this.min_y);\r\n        // ctx.lineTo(this.min_x, this.min_y);\r\n        // ctx.stroke();\r\n        //\r\n        // // bottom\r\n        // ctx.beginPath();\r\n        // ctx.moveTo(this.min_x, this.max_y);\r\n        // ctx.lineTo(this.max_x, this.max_y);\r\n        // ctx.stroke();\r\n\r\n    }\r\n\r\n    /**\r\n     * draw_csv_Base_Drawing_guide()\r\n     * Draws the guide text and tooltips and such for the base drawing for learning mode\r\n     */\r\n    draw_csv_Base_Drawing_guide(){\r\n        // console.log(\"draw_csv_Base_Drawing_guide\");\r\n        // this.clearCanvas(base);\r\n        // const ctx = this.getLayer(base);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * draw_csv_Heat_Insert()\r\n     * Function to draw the heat insert visuals (currently only draws an orange square)\r\n     */\r\n    draw_csv_Heat_Insert(){\r\n        // console.log(heat, \" draw_csv_Heat_Insert called\"); //:debug\r\n\r\n        this.clearCanvas(heat);\r\n        const ctx = this.getLayer(heat);\r\n\r\n        // Managing particles\r\n        // Turn on Electron Generator, 1 electron per 4 seconds\r\n        this.startElectronGenerator(4);\r\n    }\r\n\r\n    /**\r\n     * draw_csv_Heat_Insert_guide()\r\n     * Draws the guide text and tooltips and such for draw_csv_Heat_Insert for learning mode\r\n     */\r\n    draw_csv_Heat_Insert_guide(){\r\n        // console.log(heat, \" draw_csv_Heat_Insert_guide called\"); //:debug\r\n\r\n        // this.clearCanvas(heat);\r\n        // const ctx = this.getLayer(heat);\r\n    }\r\n\r\n    // draw_csv_Heat_Insert_Particle(){\r\n    //     const ctx = this.getLayer(heat);\r\n    //\r\n    //     // let electron = new ProtoParticle(ctx, ctx.canvas.width * .3, ctx.canvas.height *.6, -999, -999, 0, 0, 6, 'blue'); // randomized\r\n    //     let electron = new ProtoParticle(ctx, this.min_x + 12, (this.min_y + this.max_y) / 2, -999, -999, 0, 0, 6, 'blue', this.max_y, this.min_y, this.max_x, this.min_x); // randomized\r\n    //     electron.setAnimation(this.electronAnimation);\r\n    //     electron.startAnimation();\r\n    //\r\n    //     this.electron_particles.push(electron);\r\n    // }\r\n\r\n    /**\r\n     * draw_csv_gas_feed()\r\n     * Function to draw the gas feed visuals (currently only draws a yellow square)\r\n     */\r\n    draw_csv_gas_feed(){\r\n        // console.log(gas, \" draw_csv_gas_feed called\"); //:debug\r\n\r\n        // this.clearCanvas(gas);\r\n        const ctx = this.getLayer(gas);\r\n\r\n\r\n        // Jack - managing particles\r\n        // Turn on Xenon Generator, 1 xenon per 5 seconds\r\n        this.startXenonGenerator(5);\r\n\r\n        // ProtoParticle.generateXenon(ctx)\r\n        // this.draw_csv_gas_feed_particles();\r\n    }\r\n\r\n\r\n    /**\r\n     * Spawns xenon particles every [spawn_rate] seconds, simulates the gas feed.\r\n     * @author Jack\r\n     *\r\n     * @param spawn_rate time in SECONDS between each particle spawn.\r\n     */\r\n    startXenonGenerator(spawn_rate){\r\n        const ctx = this.getLayer(gas);\r\n\r\n        // 1 xenon per 3 seconds\r\n        if(this.XenonGeneratorKey === -1){\r\n            ProtoParticle.generateXenon(ctx, this.min_x + 20, (this.min_y + this.max_y) / 2, this.max_y, this.min_y, this.max_x, this.min_x); // generate an initial one to get it going right away\r\n            this.XenonGeneratorKey = setInterval(ProtoParticle.generateXenon, spawn_rate * 1000, ctx, this.min_x + 20, (this.min_y + this.max_y) / 2, this.max_y, this.min_y, this.max_x, this.min_x); // generate on a timer\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Restarts the xenon generator with the desired spawn rate, likely to slow it down\r\n     *\r\n     * @param new_spawn_rate time in seconds between each particle spawn\r\n     */\r\n    slowXenonGenerator(new_spawn_rate){\r\n        this.killXenonGenerator();\r\n        this.startXenonGenerator(new_spawn_rate);\r\n    }\r\n\r\n    /**\r\n     * Stops the generation of xenon immediately\r\n     */\r\n    killXenonGenerator(){\r\n        clearInterval(this.XenonGeneratorKey); // kill interval\r\n        this.XenonGeneratorKey = -1; // reset key\r\n    }\r\n\r\n    /**\r\n     * Spawns xenon particles every [spawn_rate] seconds, simulates heated cathode inserts.\r\n     * @author Jack\r\n     *\r\n     * @param spawn_rate time in SECONDS between each particle spawn.\r\n     */\r\n    startElectronGenerator(spawn_rate){\r\n        const ctx = this.getLayer(heat);\r\n\r\n        // 2 electrons per 4 seconds\r\n        if(this.ElectronGeneratorKey === -1){\r\n            ProtoParticle.generateElectron(ctx, this.min_x + 12, (this.min_y + this.max_y) / 2, this.max_y, this.min_y, this.max_x, this.min_x); // generate an initial one to get it going right away\r\n            this.ElectronGeneratorKey = setInterval(ProtoParticle.generateElectron, spawn_rate * 1000, ctx, this.min_x + 12, (this.min_y + this.max_y) / 2, this.max_y, this.min_y, this.max_x, this.min_x); // generate on a timer\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Restarts the electron generator with the desired spawn rate, likely to slow it down\r\n     *\r\n     * @param new_spawn_rate time in seconds between each particle spawn\r\n     */\r\n    slowElectronGenerator(new_spawn_rate){\r\n        this.killElectronGenerator();\r\n        this.startElectronGenerator(new_spawn_rate);\r\n    }\r\n\r\n    /**\r\n     * Stops the generation of electrons immediately\r\n     */\r\n    killElectronGenerator(){\r\n        clearInterval(this.ElectronGeneratorKey); // kill interval\r\n        this.ElectronGeneratorKey = -1; // reset key\r\n    }\r\n\r\n\r\n    // /**\r\n    //  * draw_csv_gas_feed_particles()\r\n    //  * Draws some simulated particles for the gas feed as a demo\r\n    //  * Author: @Jack Blicha\r\n    //  */\r\n    // draw_csv_gas_feed_particles(){\r\n    //\r\n    // }\r\n\r\n\r\n\r\n    /**\r\n     * draw_csv_gas_feed_guide()\r\n     * Draws the guide text and tooltips and such for draw_csv_gas_feed for learning mode\r\n     */\r\n    draw_csv_gas_feed_guide(){\r\n        // console.log(gas, \" draw_csv_gas_feed_guide called\"); //:debug\r\n\r\n         this.clearCanvas(gas);\r\n         const ctx = this.getLayer(gas);\r\n\r\n    }\r\n\r\n    /**\r\n     * draw_csv_internal_plasma()\r\n     * Function to draw the internal plasma visuals (currently only draws a green square)\r\n     */\r\n    draw_csv_internal_plasma(){\r\n        // console.log(plasma, \" draw_csv_internal_plasma called\"); //:debug\r\n\r\n        this.clearCanvas(plasma);\r\n        const ctx = this.getLayer(plasma);\r\n\r\n        ProtoParticle.ionizeParticles();\r\n    }\r\n\r\n    /**\r\n     * draw_csv_internal_plasma_guide()\r\n     * Draws the guide text and tooltips and such for draw_csv_internal_plasma for learning mode\r\n     */\r\n    draw_csv_internal_plasma_guide() {\r\n        // console.log(plasma, \" draw_csv_internal_plasma_guide called\"); //:debug\r\n\r\n        // because the user has the inserts heated and the gas feed toggled on, plasma is forming within the cathode tube/chamber(?), this plasma is super hot and stuff and is what we need\r\n        // now we need to eject this plasma from the hollow cathode\r\n\r\n        // this.clearCanvas(plasma);\r\n        // const ctx = this.getLayer(plasma);\r\n\r\n    }\r\n\r\n    /**\r\n     * draw_csv_internal_plasma_off_heat_guide()\r\n     * Draws the guide text for when the user has caused the internal plasma to disappear due to turning off \"heat inserts\"\r\n     */\r\n    draw_csv_internal_plasma_on_heat_guide() {\r\n        // console.log(plasma, \" draw_csv_internal_plasma_off_heat_guide called\"); //:debug\r\n    }\r\n\r\n    /**\r\n     * draw_csv_internal_plasma_off_heat_guide()\r\n     * Draws the guide text for when the user has caused the internal plasma to disappear due to turning off \"heat inserts\"\r\n     */\r\n    draw_csv_internal_plasma_on_heat_guide() {\r\n        // console.log(plasma, \" draw_csv_internal_plasma_off_heat_guide called\"); //:debug\r\n    }\r\n\r\n    /**\r\n     * draw_csv_internal_plasma_off_heat_guide()\r\n     * Draws the guide text for when the user has caused the internal plasma to disappear due to turning off \"heat inserts\"\r\n     */\r\n    draw_csv_internal_plasma_off_heat_guide() {\r\n        // console.log(plasma, \" draw_csv_internal_plasma_off_heat_guide called\"); //:debug\r\n    }\r\n\r\n    /**\r\n     * draw_csv_internal_plasma_off_gas_guide()\r\n     * Draws the guide text for when the user has caused the internal plasma to disappear due to turning off \"gas feed\"\r\n     */\r\n    draw_csv_internal_plasma_off_gas_guide() {\r\n        // console.log(plasma, \" draw_csv_internal_plasma_off_gas_guide called\"); //:debug\r\n    }\r\n\r\n\r\n    /**\r\n     * draw_csv_keeper_electrode()\r\n     * Function to draw the keeper electrode visuals (currently only draws a blue square)\r\n     */\r\n    draw_csv_keeper_electrode(){\r\n        // console.log(keeper, \" draw_csv_keeper_electrode called\"); //:debug\r\n\r\n        this.clearCanvas(keeper);\r\n        const ctx = this.getLayer(keeper);\r\n    }\r\n\r\n    /**\r\n     * draw_csv_keeper_electrode_guide()\r\n     * Draws the guide text and tooltips and such for the draw_csv_keeper_electrode for learning mode\r\n     */\r\n    draw_csv_keeper_electrode_guide(){\r\n        // console.log(keeper, \" draw_csv_keeper_electrode_guide called\"); //:debug\r\n\r\n        // this.clearCanvas(keeper);\r\n        // const ctx = this.getLayer(keeper);\r\n    }\r\n\r\n\r\n    /**\r\n     * draw_csv_eject_plasma()\r\n     * Function to draw the eject plasma visuals (currently only draws a violet [purple] square)\r\n     */\r\n    draw_csv_eject_plasma(){\r\n        // console.log(eject, \" draw_csv_eject_plasma called\"); //:debug\r\n\r\n        this.clearCanvas(eject);\r\n        const ctx = this.getLayer(eject);\r\n\r\n        ProtoParticle.ejectParticles();\r\n    }\r\n\r\n    /**\r\n     * draw_csv_eject_plasma_guide()\r\n     * Draws the guide text and tooltips and such for the draw_csv_eject_plasma for learning mode\r\n     */\r\n    draw_csv_eject_plasma_guide() {\r\n        // console.log(eject, \" draw_csv_eject_plasma_guide called\"); //:debug\r\n\r\n        // this.clearCanvas(eject);\r\n        // const ctx = this.getLayer(eject);\r\n    }\r\n}\r\n\r\nexport default Painter;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport LandingPage from \"./LandingPage.js\";\r\nimport Painter from \"./Painter\";\r\n\r\n/**\r\n * Mapping layers via constants\r\n * These should always be used to reference layers when used as parameters to a function or when interacting with this.state.\r\n * This allows us to easily add and remove layers.\r\n */\r\nimport {\r\n    base,\r\n    canvas_height,\r\n    canvas_width,\r\n    eject,\r\n    gas,\r\n    heat,\r\n    keeper,\r\n    plasma\r\n} from \"./Galactic\";\r\nimport ProtoParticle from \"./ProtoParticle\";\r\n\r\nvar isAuto = false;\r\n/**\r\n * Presentation mode element\r\n * Should be rendered inside a <div id={\"canvasHolder\"}>\r\n * also with props: id={\"PresMode\"} deltastage={base} scene={[true,false,false,false,false,false]}\r\n */\r\nclass PresMode extends React.Component {\r\n    // Instance variables:\r\n    // (all basically cosmetic) (created in constructor)\r\n    deltastage;\r\n    scene;\r\n    canvas;\r\n    layers; // layers[base = 0, heat = 1, gas = 2, plasma = 3, keeper = 4, eject = 5]; //layers = [ctx0, ctx1, ctx2, ctx3, ctx4, ctx5];\r\n    painter;\r\n\r\n\r\n    constructor(props){\r\n        super();\r\n\r\n        this.base_cathode = new Image();\r\n        this.base_cathode.src = \"/images/base_cathode.png\";\r\n\r\n        // initialize canvas instance variables\r\n        this.canvas0 = React.createRef();                              //// 1 - create ref\r\n        this.canvas1 = React.createRef();\r\n        this.canvas2 = React.createRef();\r\n        this.canvas3 = React.createRef();\r\n        this.canvas4 = React.createRef();\r\n        this.canvas5 = React.createRef();\r\n\r\n        this.canvas6 = React.createRef();   //Hall Thruster OFF\r\n        this.canvas7 = React.createRef();   //Hall Thruster ON\r\n\r\n        // bind handler function(s)\r\n        this.nextButton_HandleClick = this.nextButton_HandleClick.bind(this);\r\n        this.autoToggleButton_HandleClick = this.autoToggleButton_HandleClick.bind(this)\r\n\r\n        //sets ID of the autonomous interval to an used value by default\r\n        this.autoID = 0\r\n        this.delay = 5000\r\n\r\n        // initialize state\r\n        this.state = { deltastage: props.deltastage, scene: props.scene };\r\n\r\n        this.state.canvas_height = document.getElementById(\"root\").clientHeight;\r\n        this.state.canvas_width = document.getElementById(\"root\").clientWidth * 0.60;\r\n    }\r\n\r\n    /**\r\n     * componentDidMount()\r\n     * Called when canvas element is mounted on page (canvas element is unusable up until this point)\r\n     */\r\n    componentDidMount() {\r\n        // initialize instance variables for each canvas element/layer\r\n        const ctx0 = this.canvas0.current.getContext('2d'); // base = 0;\r\n        const ctx1 = this.canvas1.current.getContext('2d'); // heat = 1;\r\n        const ctx2 = this.canvas2.current.getContext('2d'); // gas = 2;\r\n        const ctx3 = this.canvas3.current.getContext('2d'); // plasma = 3;\r\n        const ctx4 = this.canvas4.current.getContext('2d'); // keeper = 4;\r\n        const ctx5 = this.canvas5.current.getContext('2d'); // eject = 5;\r\n        const ctx6 = this.canvas6.current.getContext('2d'); // Hall Thruster OFF = 6;\r\n        const ctx7 = this.canvas7.current.getContext('2d'); // Hall Thruster ON = 7;\r\n\r\n        this.layers = [ctx0, ctx1, ctx2, ctx3, ctx4, ctx5, ctx6, ctx7];\r\n        //      layers[base = 0, heat = 1, gas = 2, plasma = 3, keeper = 4, eject = 5, thruster off = 6, thruster on = 7];\r\n        this.painter = new Painter(this.layers);\r\n        this.scenarioRefresh();\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * scenarioRefresh()\r\n     *\r\n     * Populates the canvas based on the current state, is hopefully called whenever a change is made (ex: the onClick functions)\r\n     * You can see the end of this function as the end of the current update/iteration.\r\n     */\r\n    scenarioRefresh() {\r\n        // console.log(\"PresMode.scenarioRefresh() called\"); //:debug\r\n\r\n        // console.log(\"   scenarioRefresh:: this.state.deltastage\", this.state.deltastage); //:debug\r\n        // console.log(\"   scenarioRefresh:: this.state.scene\", this.state.scene); //:debug\r\n        // clear all drawings if the user just entered presentation mode or it looped back to the beginning\r\n        if (this.state.scene[base] === true && this.state.scene[heat] === false) {\r\n            // clear every layer, and all particles, and all generators\r\n            this.painter.killElectronGenerator();\r\n            this.painter.killXenonGenerator();\r\n            ProtoParticle.killAllElectron();\r\n            ProtoParticle.killAllXenon();\r\n            for (let i = base; i < this.state.scene.length; i++) {\r\n                this.painter.clearCanvas(i);\r\n            }\r\n        }\r\n\r\n        // if basedrawing is active\r\n        if (this.state.scene[base] === true) {\r\n            //this.draw_csv_Base_Drawing();\r\n\r\n            //draw base cathode\r\n            this.painter.draw_csv_Base_Drawing();\r\n        }\r\n\r\n        // if heat insert is active\r\n        if (this.state.scene[heat] === true) {\r\n            this.painter.draw_csv_Heat_Insert();\r\n        }\r\n\r\n        // if gas feed is active\r\n        if (this.state.scene[gas] === true) {\r\n            this.painter.draw_csv_gas_feed();\r\n        }\r\n\r\n        // if internal plasma is active\r\n        if (this.state.scene[plasma] === true) {\r\n            this.painter.draw_csv_internal_plasma();\r\n        }\r\n\r\n        // if keeper electrode is active\r\n        if (this.state.scene[keeper] === true) {\r\n            this.painter.draw_csv_keeper_electrode();\r\n        }\r\n\r\n        // if eject plasma is active\r\n        if (this.state.scene[eject] === true) {\r\n            this.painter.draw_csv_eject_plasma();\r\n        }\r\n\r\n        // console.log(\"-----------------------------scenarioRefresh (end)-----------------------------\"); //:debug\r\n    }\r\n\r\n    /**\r\n     * nextButton_HandleClick()\r\n     * Onclick handler for the \"next\" button, updates the state via appropriate logic\r\n     */\r\n    nextButton_HandleClick() {\r\n        let newdeltastage = this.state.deltastage;\r\n        let newscene = this.state.scene;\r\n\r\n        // update the state, currently does not show hall thruster information, and skips those steps entirely by design\r\n        if(this.state.deltastage === this.state.scene.length - 3){\r\n            // special case: loop to beginning         note: this loop intentionally starts at 1 instead of zero\r\n            for (let i = 1; i < this.state.scene.length; i++) {\r\n                newdeltastage = base;\r\n                newscene[i] = false;\r\n            }\r\n        } else {\r\n            // normal case: move to next animation stage\r\n            for (let i = 1; i < this.state.scene.length; i++) {\r\n                if(this.state.scene[i] === false){\r\n                    newdeltastage = i;\r\n                    newscene = this.state.scene;\r\n                    newscene[i] = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        // change the current state, refresh scenario in callback to synchronously update the visuals after the state has changed\r\n        this.setState((state, props) => {\r\n            return { deltastage: newdeltastage, scene: newscene };\r\n        }, () => {this.scenarioRefresh()});\r\n\r\n        // WARNING: code past setState will not be synchronously executed\r\n    }\r\n\r\n    /**\r\n     * backButton_HandleClick()\r\n     * Onclick handler for the \"back\" button, reloads the landing page\r\n     */\r\n    backButton_HandleClick() {\r\n        // render learning mode\r\n        ReactDOM.render(\r\n            <div id={\"canvasHolder\"}>\r\n                <LandingPage id={\"landingPage\"}/>\r\n            </div>,\r\n            document.getElementById('root')\r\n        );\r\n    }\r\n\r\n    /**\r\n     * autoToggleButton_HandleClick()\r\n     * Onclick handler for the \"Autonomous/Manual\" button, starts the looping progress\r\n     */\r\n    autoToggleButton_HandleClick() {\r\n        isAuto = !isAuto\r\n        if(isAuto){\r\n            //when in auto mode, the next button is hidden, but the handler function for 'next' is run every this.delay (currently 5000) milliseconds\r\n            document.getElementById(\"nextButton\").style.visibility = 'hidden'\r\n            this.autoID = setInterval(()=>{this.nextButton_HandleClick()}, this.delay)\r\n        }\r\n        else{\r\n            //when out of auto mode, the interval is stopped, and the 'next' button is returned\r\n            document.getElementById(\"nextButton\").style.visibility = 'visible'\r\n            clearInterval(this.autoID)\r\n        }\r\n    }\r\n\r\n    render(){\r\n        // console.log(\"PresMode.render called\") //:debug\r\n        return (\r\n            <>\r\n                <canvas id={\"canvas0\"} ref={this.canvas0} className={\"canvas\"} width={this.state.canvas_width} height={this.state.canvas_height} deltastage={this.state.deltastage} scene={this.state.scene} > You need a better browser :( </canvas>\r\n                <canvas id={\"canvas1\"} ref={this.canvas1} className={\"canvas\"} width={this.state.canvas_width} height={this.state.canvas_height} deltastage={this.state.deltastage} scene={this.state.scene} > You need a better browser :( </canvas>\r\n                <canvas id={\"canvas2\"} ref={this.canvas2} className={\"canvas\"} width={this.state.canvas_width} height={this.state.canvas_height} deltastage={this.state.deltastage} scene={this.state.scene} > You need a better browser :( </canvas>\r\n                <canvas id={\"canvas3\"} ref={this.canvas3} className={\"canvas\"} width={this.state.canvas_width} height={this.state.canvas_height} deltastage={this.state.deltastage} scene={this.state.scene} > You need a better browser :( </canvas>\r\n                <canvas id={\"canvas4\"} ref={this.canvas4} className={\"canvas\"} width={this.state.canvas_width} height={this.state.canvas_height} deltastage={this.state.deltastage} scene={this.state.scene} > You need a better browser :( </canvas>\r\n                <canvas id={\"canvas5\"} ref={this.canvas5} className={\"canvas\"} width={this.state.canvas_width} height={this.state.canvas_height} deltastage={this.state.deltastage} scene={this.state.scene} > You need a better browser :( </canvas>\r\n                <canvas id={\"canvas6\"} ref={this.canvas6} className={\"canvas\"} width={this.state.canvas_width} height={this.state.canvas_height} deltastage={this.state.deltastage} scene={this.state.scene} > You need a better browser :( </canvas>\r\n                <canvas id={\"canvas7\"} ref={this.canvas7} className={\"canvas\"} width={this.state.canvas_width} height={this.state.canvas_height} deltastage={this.state.deltastage} scene={this.state.scene} > You need a better browser :( </canvas>\r\n\r\n                <div className={\"stackedButtonGroup bottomleftAlign\"}>\r\n                    <button id={\"backButton\"} className={\"button\"} onClick={this.backButton_HandleClick}> Back to Landing Page </button>\r\n                    <button id={\"autoToggleButton\"} className={\"button\"} onClick={this.autoToggleButton_HandleClick}> Toggle Mode </button>\r\n                </div>\r\n                <div className={\"stackedButtonGroup bottomrightAlign\"}>\r\n                    <button id={\"nextButton\"} className={\"button\"} onClick={this.nextButton_HandleClick}> Next </button>\r\n                </div>\r\n            </>\r\n        ) //// 2 - attach ref to node via ref = this.canvas#\r\n    }\r\n}\r\n\r\nexport default PresMode;","import React from \"react\";\r\nimport Painter from \"./Painter\";\r\nimport {\r\n    base,\r\n    eject,\r\n    gas,\r\n    hallThrusterOff,\r\n    hallThrusterOn,\r\n    heat,\r\n    keeper,\r\n    plasma,\r\n    hallThrusterPrimaryText,\r\n    hallThrusterSecondaryOnText,\r\n    hallThrusterSecondaryOffText,\r\n    cathodeShellPrimaryTitleText,\r\n    cathodeShellPrimaryText,\r\n    heatTitleText,\r\n    heatText,\r\n    gasTitleText2,\r\n    gasText,\r\n    plasmaTitleText,\r\n    plasmaText,\r\n    keeperTitleText,\r\n    keeperText,\r\n    ejectTitleText,\r\n    ejectText,\r\n    heatKeeperErrorTitleText,\r\n    heatKeeperErrorText,\r\n    gasKeeperTitleText,\r\n    gasKeeperErrorText, cathodeCSVTitleText, cathodeCSVText\r\n} from \"./Galactic\";\r\n\r\nimport ReactDOM from \"react-dom\";\r\nimport LandingPage from \"./LandingPage\";\r\n\r\nconst {promisify} = require('util')\r\nconst sleep= promisify(setTimeout)\r\n\r\nlet canvas_height = 750;\r\nlet canvas_width = 1150;\r\n\r\n/**\r\n * Learning mode element\r\n * Should be rendered inside a <div id={\"canvasHolder\"}>\r\n * also with props: id={\"LearningMode\"} deltastage={base} scene={[true,false,false,false,false,false,false,false]}\r\n */\r\n\r\nvar HALL_THRUSTER_ON = false;\r\n\r\nexport class LearningMode extends React.Component {\r\n\r\n    // Instance variables:\r\n    // (all essentially cosmetic) (created in constructor)\r\n    deltastage;\r\n    scene;\r\n    canvas;\r\n    layers; // layers[base = 0, heat = 1, gas = 2, plasma = 3, keeper = 4, eject = 5, thruster off = 6, thruster on = 7]; //layers = [ctx0, ctx1, ctx2, ctx3, ctx4, ctx5, ctx6, ctx7];\r\n    painter;\r\n    thrusterButtonText; // if the thruster is on, this text says \"off\", and vice versa\r\n\r\n    constructor(props){\r\n        super();\r\n\r\n        // initialize canvas instance variables\r\n\r\n        //Hollow Cathode Canvases:\r\n        this.canvas0 = React.createRef();   //// 1 - create ref\r\n        this.canvas1 = React.createRef();\r\n        this.canvas2 = React.createRef();\r\n        this.canvas3 = React.createRef();\r\n        this.canvas4 = React.createRef();\r\n        this.canvas5 = React.createRef();\r\n\r\n        //Hall Thruster Canvases:\r\n        this.canvas6 = React.createRef();   //Hall Thruster OFF\r\n        this.canvas7 = React.createRef();   //Hall Thruster ON\r\n\r\n        // bind handler function(s)\r\n        this.HeatInsertToggle_HandleClick = this.HeatInsertToggle_HandleClick.bind(this);\r\n        this.GasFeedToggle_HandleClick = this.GasFeedToggle_HandleClick.bind(this);\r\n        this.KeeperElectrodeToggle_HandleClick = this.KeeperElectrodeToggle_HandleClick.bind(this);\r\n        this.nextButton_plasma_HandleClick = this.nextButton_plasma_HandleClick.bind(this);\r\n        this.nextButton_eject_HandleClick = this.nextButton_eject_HandleClick.bind(this);\r\n        this.hallThrusterToggle_HandleClick = this.hallThrusterToggle_HandleClick.bind(this);\r\n        this.nextButton_hallThrusterToShell_HandleClick = this.nextButton_hallThrusterToShell_HandleClick.bind(this);\r\n        this.nextButton_shellToLearningModeCore_HandleClick = this.nextButton_shellToLearningModeCore_HandleClick.bind(this);\r\n        this.nextButton_end_HandleClick = this.nextButton_end_HandleClick.bind(this);\r\n\r\n        // initialize state\r\n        this.state = { deltastage: props.deltastage, scene: props.scene, text:props.text};\r\n\r\n        this.state.canvas_height = document.getElementById(\"root\").clientHeight;\r\n        this.state.canvas_width = document.getElementById(\"root\").clientWidth * 0.60;\r\n\r\n        // Hall Thruster toggle button text\r\n        if(this.state.scene[hallThrusterOn] === true) {\r\n            this.thrusterButtonText = \"Off\";\r\n        }\r\n        else {\r\n            this.thrusterButtonText = \"On\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Hides the element with the given id\r\n     * @param elementId id of element to hide\r\n     */\r\n    hideElement(elementId){\r\n        //document.getElementById(elementId).style.visibility = 'hidden';\r\n        document.getElementById(elementId).style.display = 'none';\r\n    }\r\n    /**\r\n     * Un-hides the element with the given id\r\n     * @param elementId id of element to show\r\n     */\r\n    showElement(elementId){\r\n        // document.getElementById(elementId).style.visibility = 'visible';\r\n        document.getElementById(elementId).style.display = 'flex';\r\n    }\r\n\r\n    isElementShown(elementId){\r\n        if(document.getElementById(elementId).style.display === 'flex') {\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * componentDidMount()\r\n     * Called when canvas element is mounted on page (canvas element is unusable up until this point)\r\n     */\r\n    componentDidMount() {\r\n        // initialize instance variables for each canvas element/layer\r\n        const ctx0 = this.canvas0.current.getContext('2d'); // base = 0;\r\n        const ctx1 = this.canvas1.current.getContext('2d'); // heat = 1;\r\n        const ctx2 = this.canvas2.current.getContext('2d'); // gas = 2;\r\n        const ctx3 = this.canvas3.current.getContext('2d'); // plasma = 3;\r\n        const ctx4 = this.canvas4.current.getContext('2d'); // keeper = 4;\r\n        const ctx5 = this.canvas5.current.getContext('2d'); // eject = 5;\r\n        const ctx6 = this.canvas6.current.getContext('2d'); // Hall Thruster OFF = 6;\r\n        const ctx7 = this.canvas7.current.getContext('2d'); // Hall Thruster ON = 7;\r\n\r\n        document.getElementById(\"HallThrusterNext\").onclick = this.nextButton_hallThrusterToShell_HandleClick\r\n        document.getElementById(\"HallThrusterNext_Accessible\").onclick = this.nextButton_hallThrusterToShell_HandleClick\r\n\r\n        this.layers = [ctx0, ctx1, ctx2, ctx3, ctx4, ctx5, ctx6, ctx7];\r\n        //      layers[base = 0, heat = 1, gas = 2, plasma = 3, keeper = 4, eject = 5, thruster off = 6, thruster on = 7];\r\n        this.painter = new Painter(this.layers);\r\n        this.scenarioRefresh();\r\n\r\n    }\r\n\r\n    /**\r\n     * scenarioRefresh()\r\n     *\r\n     * Populates the canvas based on the current state, is hopefully called whenever a change is made (ex: the onClick functions)\r\n     * You can see the end of this function as the end of the current update/iteration.\r\n     */\r\n    scenarioRefresh() {\r\n        // Execute logic based on deltastage and scene\r\n        this.setState({text: \" \"})\r\n\r\n        if(this.state.scene[hallThrusterOff] === true) {\r\n            this.hideElement(\"hallThrusterOn-fadeIn\")\r\n            this.hideElement(\"hallThrusterOn-fadeOut\")\r\n\r\n            this.hideElement(\"toggleButtonGroup\");\r\n            this.painter.draw_Hall_Thruster_Off();\r\n\r\n            this.showElement(\"hallThrusterOffLabelDiv\");\r\n            this.showElement(\"hallThrusterOffSublabelDiv\");\r\n\r\n            this.hideElement(\"hallThrusterOnLabelDiv\");\r\n            this.hideElement(\"hallThrusterOnSublabelDiv\");\r\n        }\r\n        else\r\n        {\r\n            this.hideElement(\"hallThrusterButtonGroup\");\r\n            this.hideElement(\"hallThrusterOffLabelDiv\");\r\n            this.hideElement(\"hallThrusterOnLabelDiv\");\r\n            this.hideElement(\"hallThrusterOffSublabelDiv\");\r\n            this.hideElement(\"hallThrusterOnSublabelDiv\");\r\n            this.hideElement(\"hallThrusterNameLabelDiv\");\r\n            this.hideElement(\"hallThrusterNameSublabelDiv\");\r\n\r\n        }\r\n\r\n        if (this.state.scene[hallThrusterOn] === true)\r\n        {\r\n            this.hideElement(\"toggleButtonGroup\");\r\n            this.painter.draw_Hall_Thruster_On();\r\n\r\n            this.showElement(\"hallThrusterOnLabelDiv\");\r\n            this.showElement(\"hallThrusterOnSublabelDiv\");\r\n\r\n            this.hideElement(\"hallThrusterOffLabelDiv\");\r\n            this.hideElement(\"hallThrusterOffSublabelDiv\");\r\n        }\r\n\r\n        // Hall Thruster toggle button text\r\n        // programed backwards because of order of execution\r\n\r\n        //If the user turns the hall thruster on\r\n        if(this.state.scene[hallThrusterOn] === true){\r\n            HALL_THRUSTER_ON = true;\r\n            this.showElement(\"hallThrusterOn-fadeIn\")\r\n\r\n            this.thrusterButtonText = \"Off\";\r\n\r\n        }\r\n        //If the user turns the hall thruster off after it was just on\r\n        else if(HALL_THRUSTER_ON === true)\r\n        {\r\n            this.showElement(\"hallThrusterOn-fadeOut\")\r\n            this.thrusterButtonText = \"On\";\r\n\r\n            //HALL_THRUSTER_ON = false;\r\n        }\r\n        //If the hall thruster is off\r\n        //Also the first thing to happen in Hall Thruster view\r\n        else\r\n        {\r\n            this.hideElement(\"hallThrusterOn-fadeIn\")\r\n            this.hideElement(\"hallThrusterOn-fadeOut\")\r\n\r\n            this.thrusterButtonText = \"On\";\r\n        }\r\n\r\n        if(this.state.scene[hallThrusterOn] === false && this.state.scene[hallThrusterOff] === false)\r\n        {\r\n            this.hideElement(\"hallThrusterOn-fadeIn\")\r\n            this.hideElement(\"hallThrusterOn-fadeOut\")\r\n        }\r\n\r\n\r\n        if(this.state.scene[hallThrusterOn] === true) {\r\n            this.painter.draw_Hall_Thruster_On();\r\n        } else if (this.state.deltastage === hallThrusterOn) {\r\n            this.painter.clearCanvas(hallThrusterOn);\r\n        }else{\r\n            this.hideElement(\"hallThrusterOn-fadeOut\")\r\n            this.hideElement(\"hallThrusterOn-fadeIn\")\r\n        }\r\n\r\n        // if basedrawing is active\r\n        if(this.state.scene[base] === true){\r\n            this.painter.draw_csv_Base_Drawing()\r\n            this.painter.clearCanvas(hallThrusterOn)\r\n            this.painter.clearCanvas(hallThrusterOff)\r\n\r\n            // if the user just toggled basedrawing\r\n            if(this.state.deltastage === base || this.state.deltastage === hallThrusterOn || this.deltastage === hallThrusterOff){\r\n                this.painter.draw_csv_Base_Drawing_guide();\r\n                this.setState({text: cathodeCSVText})\r\n            }\r\n        }\r\n        // the user deselected this option/layer\r\n        else if (this.state.deltastage === base){\r\n            this.painter.clearCanvas(this.state.deltastage);\r\n        }\r\n\r\n        // if keeper electrode is active\r\n        if(this.state.scene[keeper] === true){\r\n            this.painter.draw_csv_keeper_electrode();\r\n\r\n            // if the user just toggled the keeper electrode\r\n            if(this.state.deltastage === keeper){\r\n                this.setState({text: keeperText})\r\n            }\r\n        }\r\n        // if the user deselected this option/layer\r\n        else if (this.state.deltastage === keeper){\r\n            this.painter.clearCanvas(this.state.deltastage);\r\n        }\r\n\r\n        // if heat insert is active\r\n        if(this.state.scene[heat] === true){\r\n\r\n            this.painter.draw_csv_Heat_Insert();\r\n\r\n            // if the user just toggled heat insert\r\n            if(this.state.deltastage === heat)\r\n            {\r\n                this.setState({text: heatText})\r\n            }\r\n        }\r\n        // if the user deselected this option/layer\r\n        else if (this.state.deltastage === heat){\r\n\r\n            this.painter.killElectronGenerator();\r\n            this.painter.clearCanvas(this.state.deltastage);\r\n        }\r\n\r\n        // if gas feed is active\r\n        if(this.state.scene[gas] === true){\r\n            this.painter.draw_csv_gas_feed();\r\n\r\n            // if the user just toggled the gas feed\r\n            if(this.state.deltastage === gas){\r\n                this.setState({text: gasText})\r\n            }\r\n        }\r\n        // if the user deselected this option/layer\r\n        else if (this.state.deltastage === gas){\r\n            this.painter.killXenonGenerator();\r\n            this.painter.clearCanvas(this.state.deltastage);\r\n        }\r\n\r\n        // INTERNAL PLASMA // -----------\r\n        // if internal plasma is true\r\n        if(this.state.scene[plasma]){\r\n            if(this.state.scene[heat] && this.state.scene[gas]){\r\n                this.painter.draw_csv_internal_plasma();\r\n\r\n                // if the user  just triggered the internal plasma\r\n                if(this.state.deltastage === plasma){\r\n                    this.setState({text: plasmaText})\r\n                }\r\n            } else {\r\n                // plasma shouldn't exist\r\n                let newScene = this.state.scene;\r\n                newScene[plasma] = false;\r\n\r\n                // change the current state, refresh scenario in callback to synchronously update the visuals after the state has changed\r\n                this.setState((state, props) => {\r\n                    return { deltastage: plasma, scene: newScene };\r\n                }, () => {this.scenarioRefresh()});\r\n            }\r\n        }\r\n\r\n        // if both heat and gas are true but internal plasma isn't\r\n        else if (this.state.scene[heat] && this.state.scene[gas]){\r\n            // there probably should be internal plasma?\r\n\r\n            // see if plasma should be required to be next in line\r\n            if(this.state.deltastage === heat || this.state.deltastage === gas){\r\n                // show next button (restrict user mobility)\r\n                this.painter.clearCanvas(plasma);\r\n                this.hideElement(\"toggleButtonGroup\");\r\n                this.showElement(\"nextButton\");\r\n                document.getElementById(\"nextButton\").onclick = this.nextButton_plasma_HandleClick;\r\n            }\r\n        }\r\n        // if plasma is false and deltastage is plasma\r\n        else if (this.state.deltastage === plasma){\r\n            // the user deselected this option/layer\r\n            this.painter.clearCanvas(this.state.deltastage);\r\n\r\n            // if internal plasma stops because ___ call ___ explanation\r\n            if(!this.state.scene[heat]){\r\n                this.painter.draw_csv_internal_plasma_off_heat_guide();\r\n            } else if(!this.state.scene[gas]){\r\n                this.painter.draw_csv_internal_plasma_off_gas_guide();\r\n            }\r\n        }\r\n\r\n        // EJECT PLASMA // -----------\r\n        if(this.state.scene[eject]){\r\n            if(this.state.scene[heat] && this.state.scene[gas] && this.state.scene[plasma] && this.state.scene[keeper]){\r\n                this.painter.draw_csv_eject_plasma();\r\n\r\n                // if the user just triggered eject plasma\r\n                if(this.state.deltastage === eject){\r\n                    this.setState({text: ejectText})\r\n                }\r\n            } else {\r\n                // plasma shouldn't eject\r\n                let newScene = this.state.scene;\r\n                newScene[eject] = false;\r\n\r\n                // change the current state, refresh scenario in callback to synchronously update the visuals after the state has changed\r\n                this.setState((state, props) => {\r\n                    return { deltastage: eject, scene: newScene };\r\n                }, () => {this.scenarioRefresh()});\r\n            }\r\n        }\r\n        else if (this.state.scene[heat] && this.state.scene[gas] && this.state.scene[plasma] && this.state.scene[keeper]){\r\n            // there probably should be ejecting plasma?\r\n\r\n            // see if eject should be required to be next in line\r\n            if(this.state.deltastage === keeper){\r\n                // show next button (restrict user mobility)\r\n                this.painter.clearCanvas(eject);\r\n                this.hideElement(\"toggleButtonGroup\");\r\n                this.showElement(\"nextButton\");\r\n                document.getElementById(\"nextButton\").onclick = this.nextButton_eject_HandleClick;\r\n            }\r\n        }\r\n        // if eject is false and deltastage is plasma\r\n        else if (this.state.deltastage === eject){\r\n            // the user deselected this option/layer\r\n            this.painter.clearCanvas(this.state.deltastage);\r\n\r\n            // if ejecting plasma stops bcz ___ call ___ explanation\r\n            // if(!this.state.scene[heat]){\r\n            //     this.painter.draw_csv_eject_plasma_off_heat_guide();\r\n            // } else if(!this.state.scene[gas]){\r\n            //     this.painter.draw_csv_eject_plasma_off_gas_guide();\r\n            // } else if(!this.state.scene[plasma]){\r\n            //     this.painter.draw_csv_eject_plasma_off_plasma_guide();\r\n            // } else if(!this.state.scene[keeper]){\r\n            //     this.painter.draw_csv_eject_plasma_off_keeper_guide();\r\n            // }\r\n        }\r\n\r\n        //GAS ON, KEEPER ON, NO PLASMA\r\n        if (this.state.scene[gas] === true  && this.state.scene[keeper] === true && this.state.scene[plasma] === false && (this.state.deltastage === gas || this.state.deltastage === keeper)) {\r\n            this.setState({text: gasKeeperErrorText});\r\n        }\r\n\r\n        //HEAT ON, KEEPER ON, NO PLASMA\r\n        if(this.state.scene[heat] && this.state.scene[keeper] && !this.state.scene[plasma] && (this.state.deltastage === heat || this.state.deltastage === keeper)) {\r\n            this.setState({text: heatKeeperErrorText})\r\n        }\r\n\r\n        //TODO this is a bad solution for checking the user has completed learning mode\r\n        if(this.state.scene[base] === true\r\n            && this.state.scene[heat] === true\r\n            && this.state.scene[gas] === true\r\n            && this.state.scene[plasma] === true\r\n            && this.state.scene[keeper] === true\r\n            && this.state.scene[eject] === true){\r\n            this.hideElement(\"toggleButtonGroup\");\r\n            this.showElement(\"nextButton\");\r\n            document.getElementById(\"nextButton\").onclick = this.nextButton_end_HandleClick;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * HeatInsertToggle_HandleClick()\r\n     * Onclick handler for the heat insert toggle button\r\n     */\r\n    HeatInsertToggle_HandleClick() {\r\n        let newScene = this.state.scene;\r\n        newScene[heat] = !newScene[heat];\r\n\r\n        // change the current state, refresh scenario in callback to synchronously update the visuals after the state has changed\r\n        this.setState((state, props) => {\r\n            return { deltastage: heat, scene: newScene };\r\n        }, () => {this.scenarioRefresh()});\r\n\r\n        // WARNING: code past setState will not be synchronously executed\r\n    }\r\n\r\n    /**\r\n     * GasFeedToggle_HandleClick()\r\n     * Onclick handler for the gas feed toggle button\r\n     */\r\n    GasFeedToggle_HandleClick() {\r\n        let newScene = this.state.scene;\r\n        newScene[gas] = !newScene[gas];\r\n\r\n        // change the current state, refresh scenario in callback to synchronously update the visuals after the state has changed\r\n        this.setState((state, props) => {\r\n            return { deltastage: gas, scene: newScene };\r\n        }, () => {this.scenarioRefresh()});\r\n\r\n        // WARNING: code past setState will not be synchronously executed\r\n    }\r\n\r\n    /**\r\n     * KeeperElectrodeToggle_HandleClick()\r\n     * Onclick handler for the keeper electrode toggle button\r\n     */\r\n    KeeperElectrodeToggle_HandleClick() {\r\n        let newScene = this.state.scene;\r\n        newScene[keeper] = !newScene[keeper];\r\n\r\n        // change the current state, refresh scenario in callback to synchronously update the visuals after the state has changed\r\n        this.setState((state, props) => {\r\n            return { deltastage: keeper, scene: newScene };\r\n        }, () => {this.scenarioRefresh()});\r\n\r\n        // WARNING: code past setState will not be synchronously executed\r\n    }\r\n\r\n    /**\r\n     * nextButton_plasma_HandleClick()\r\n     * Onclick handler for the \"next\" button for the internal plasma scene, updates the state and DOM via appropriate logic\r\n     */\r\n    nextButton_plasma_HandleClick() {\r\n        let newScene = this.state.scene;\r\n        newScene[plasma] = true;\r\n\r\n        // update DOM buttons (replace next with toggles)\r\n        this.hideElement(\"nextButton\");\r\n        this.showElement(\"toggleButtonGroup\");\r\n\r\n        // change the current state, refresh scenario in callback to synchronously update the visuals after the state has changed\r\n        this.setState((state, props) => {\r\n            return { deltastage: plasma, scene: newScene };\r\n        }, () => {this.scenarioRefresh()});\r\n\r\n    }\r\n\r\n    /**\r\n     * nextButton_shellToLearningModeCore_HandleClick()\r\n     */\r\n    nextButton_shellToLearningModeCore_HandleClick() {\r\n\r\n        this.hideElement(\"hallThrusterButtonGroup\");\r\n        this.showElement(\"toggleButtonGroup\");\r\n\r\n        this.hideElement(\"hallThrusterButtonGroup\");\r\n        this.hideElement(\"hallThrusterOffLabelDiv\");\r\n        this.hideElement(\"hallThrusterOnLabelDiv\");\r\n        this.hideElement(\"hallThrusterOffSublabelDiv\");\r\n        this.hideElement(\"hallThrusterOnSublabelDiv\");\r\n        this.hideElement(\"hallThrusterNameLabelDiv\");\r\n        this.hideElement(\"hallThrusterNameSublabelDiv\");\r\n        this.hideElement(\"HallThrusterNext\");\r\n\r\n        this.setState((state, props) => {\r\n            return { deltastage: base, scene: [true,false,false,false,false,false,false,false], title: cathodeCSVTitleText, text: cathodeCSVText };\r\n        }, () => {this.scenarioRefresh()});\r\n        this.scenarioRefresh()\r\n\r\n    }\r\n\r\n    /**\r\n     * nextButton_hallThrusterToShell_HandleClick()\r\n     */\r\n    nextButton_hallThrusterToShell_HandleClick() {\r\n        // transition out of \"on\" state before zooming\r\n        this.hideElement(\"hallThrusterOn-fadeIn\");\r\n        this.hideElement(\"hallThrusterOn-fadeOut\");\r\n\r\n        let nextButton = document.getElementById(\"HallThrusterNext\");\r\n        let nextButton_Accessible = document.getElementById(\"HallThrusterNext_Accessible\");\r\n\r\n        nextButton.classList.replace(\"CathodeHitBox_zoomed_out\", \"CathodeHitBox_zoomed_in\")\r\n        nextButton.onclick = this.nextButton_shellToLearningModeCore_HandleClick;\r\n        nextButton_Accessible.onclick = this.nextButton_shellToLearningModeCore_HandleClick;\r\n\r\n        // trigger zoom animation\r\n        document.getElementById(\"hallThruster\").classList.add(\"hallThrusterToCathodeZoom\")\r\n\r\n        // todo - change text (bad temporary implementation)\r\n        document.getElementById(\"hallThrusterNameLabel\").innerText = cathodeShellPrimaryTitleText;\r\n        document.getElementById(\"hallThrusterNameSublabel\").innerText = cathodeShellPrimaryText;\r\n        // todo - update red text to tell user to click the cathode again to remove its outer shell\r\n\r\n        this.hideElement(\"hallThrusterOffLabel\");\r\n        this.hideElement(\"hallThrusterOnLabel\");\r\n        this.hideElement(\"hallThrusterOffSublabel\");\r\n        this.hideElement(\"hallThrusterOnSublabel\");\r\n        this.hideElement(\"HallThrusterToggle\");\r\n\r\n        this.setState((state, props) => {\r\n            return { deltastage: base, scene: [false,false,false,false,false,false,true,false] };\r\n        }, () => {this.scenarioRefresh()});\r\n    }\r\n\r\n    hallThrusterToggle_HandleClick() {\r\n        let newScene = this.state.scene;\r\n        newScene[hallThrusterOn] = !newScene[hallThrusterOn];\r\n\r\n        this.setState((state, props) => {\r\n            return { deltastage: hallThrusterOn, scene: newScene };\r\n        }, () => {this.scenarioRefresh()});\r\n    }\r\n\r\n    /**\r\n     * nextButton_eject_HandleClick()\r\n     * Onclick handler for the \"next\" button for the eject plasma scene, updates the state and DOM via appropriate logic\r\n     */\r\n    nextButton_eject_HandleClick() {\r\n        let newScene = this.state.scene;\r\n        newScene[eject] = !newScene[eject];\r\n\r\n        // update DOM buttons (replace next with normal toggles)\r\n        this.hideElement(\"nextButton\");\r\n        this.showElement(\"toggleButtonGroup\");\r\n\r\n        // change the current state, refresh scenario in callback to synchronously update the visuals after the state has changed\r\n        this.setState((state, props) => {\r\n            return { deltastage: eject, scene: newScene };\r\n        }, () => {this.scenarioRefresh()});\r\n    }\r\n\r\n    /**\r\n     * nextButton_end_HandleClick()\r\n     * Onclick handler for the \"next\" button for the eject plasma scene's ending\r\n     * this leads to the view were we show them some links to follow and such\r\n     */\r\n\r\n    /**\r\n     * LINK TO SUMMARY PAGE HERE!!!!\r\n     */\r\n    nextButton_end_HandleClick() {\r\n        this.hideElement(\"nextButton\");\r\n    }\r\n\r\n    /**\r\n     * getLayer(layer)\r\n     * @param layer layer number which you want to get\r\n     * @returns ctx 2d canvas context for that layer\r\n     */\r\n    getLayer(layer){\r\n        return this.layers[layer];\r\n    }\r\n\r\n    /**\r\n     * backButton_HandleClick()\r\n     * Onclick handler for the \"back\" button, reloads the landing page\r\n     */\r\n    backButton_HandleClick() {\r\n\r\n        HALL_THRUSTER_ON = false;\r\n        // render learning mode\r\n        ReactDOM.render(\r\n            <div id={\"canvasHolder\"}>\r\n                <LandingPage id={\"landingPage\"}/>\r\n            </div>,\r\n            document.getElementById('root')\r\n        );\r\n    }\r\n\r\n\r\n    render(){\r\n        return (\r\n            <>\r\n                {/*<img id={\"hallThruster\"} src={\"/images/HallThrusterMockup.png\"} className={\"\"} alt={\"Base Cathode\"}/>*/}\r\n                <img id={\"hallThruster\"} src={\"/images/thrusterAndCathode.png\"} className={\"hideWhenTooSmall\"} alt={\"Hall Thruster Off\"}/>\r\n                <canvas id={\"canvas0\"} ref={this.canvas0} className={\"canvas hideWhenTooSmall unselectable\"} width={this.state.canvas_width} height={this.state.canvas_height} deltastage={this.state.deltastage} scene={this.state.scene} > You need a better browser :( </canvas>\r\n                <canvas id={\"canvas1\"} ref={this.canvas1} className={\"canvas hideWhenTooSmall unselectable\"} width={this.state.canvas_width} height={this.state.canvas_height} deltastage={this.state.deltastage} scene={this.state.scene} > You need a better browser :( </canvas>\r\n                <canvas id={\"canvas2\"} ref={this.canvas2} className={\"canvas hideWhenTooSmall unselectable\"} width={this.state.canvas_width} height={this.state.canvas_height} deltastage={this.state.deltastage} scene={this.state.scene} > You need a better browser :( </canvas>\r\n                <canvas id={\"canvas3\"} ref={this.canvas3} className={\"canvas hideWhenTooSmall unselectable\"} width={this.state.canvas_width} height={this.state.canvas_height} deltastage={this.state.deltastage} scene={this.state.scene} > You need a better browser :( </canvas>\r\n                <canvas id={\"canvas4\"} ref={this.canvas4} className={\"canvas hideWhenTooSmall unselectable\"} width={this.state.canvas_width} height={this.state.canvas_height} deltastage={this.state.deltastage} scene={this.state.scene} > You need a better browser :( </canvas>\r\n                <canvas id={\"canvas5\"} ref={this.canvas5} className={\"canvas hideWhenTooSmall unselectable\"} width={this.state.canvas_width} height={this.state.canvas_height} deltastage={this.state.deltastage} scene={this.state.scene} > You need a better browser :( </canvas>\r\n                <canvas id={\"canvas6\"} ref={this.canvas6} className={\"canvas hideWhenTooSmall unselectable\"} width={this.state.canvas_width} height={this.state.canvas_height} deltastage={this.state.deltastage} scene={this.state.scene} > You need a better browser :( </canvas>\r\n                <canvas id={\"canvas7\"} ref={this.canvas7} className={\"canvas hideWhenTooSmall unselectable\"} width={this.state.canvas_width} height={this.state.canvas_height} deltastage={this.state.deltastage} scene={this.state.scene} > You need a better browser :( </canvas>\r\n\r\n                <p id={\"warning\"} className={\"showWhenTooSmall\"}>\r\n                    Your window size is too small for this visualization.\r\n                    Please increase your window size before continuing.\r\n                </p>\r\n\r\n                <img id={\"hallThrusterOn-fadeIn\"} src={\"/images/hallThrusterOn.png\"} className={\"fade-in hideWhenTooSmall\"} alt={\"Hall Thruster On: Fade In\"}/>\r\n                <img id={\"hallThrusterOn-fadeOut\"} src={\"/images/hallThrusterOn.png\"} className={\"fade-out hideWhenTooSmall\"} alt={\"Hall Thruster On: Fade Out\"}/>\r\n\r\n                <button id={\"HallThrusterNext\"}\r\n                        className={\"CathodeHitBox_zoomed_out hideWhenTooSmall\"}>\r\n                </button>\r\n\r\n                <div id={\"backToLandingPageButtonDiv\"} className={\"stackedButtonGroup hideWhenTooSmall bottomleftAlign\"} >\r\n                    <button id={\"backButton\"} className={\"button\"} onClick={this.backButton_HandleClick}> Back to Landing Page </button>\r\n                </div>\r\n\r\n                <div id={\"hallThrusterButtonGroup\"} className={\"stackedButtonGroup bottomrightAlign hideWhenTooSmall\"}>\r\n                    <button id={\"HallThrusterNext_Accessible\"}\r\n                            className={\"button\"}> Next\r\n                    </button>\r\n                    <button id={\"HallThrusterToggle\"}\r\n                            className={\"button\"}\r\n                            onClick={this.hallThrusterToggle_HandleClick}> Turn Power {this.thrusterButtonText}\r\n                    </button>\r\n                </div>\r\n\r\n                {/*Hall thruster powered on label/title text*/}\r\n                <div id={\"hallThrusterOffLabelDiv\"}>\r\n                    <label id={\"hallThrusterOffLabel\"}\r\n                           className={\"titleLabel hallThrusterOffTitleLabelPos hideWhenTooSmall\"}> The Hall Thruster Is Off\r\n                    </label>\r\n                </div>\r\n                {/*Hall thruster powered off text*/}\r\n                <div id={\"hallThrusterOffSublabelDiv\"}>\r\n                    <label id={\"hallThrusterOffSublabel\"}\r\n                           className={\"sublabel hallThrusterOffSublabelPos hideWhenTooSmall\"}>\r\n                        {hallThrusterSecondaryOffText}\r\n\r\n                        <p><b id={\"guideText\"}>Click on the cathode to learn more about</b></p>\r\n                    </label>\r\n                </div>\r\n\r\n                {/*Hall thruster powered on label/title text*/}\r\n                <div id={\"hallThrusterOnLabelDiv\"}>\r\n                    <label id={\"hallThrusterOnLabel\"}\r\n                           className={\"titleLabel hallThrusterOffTitleLabelPos hideWhenTooSmall\"}> The Hall Thruster Is On\r\n                    </label>\r\n                </div>\r\n\r\n                {/*Hall thruster powered on text*/}\r\n                <div id={\"hallThrusterOnSublabelDiv\"}>\r\n                    <label id={\"hallThrusterOnSublabel\"}\r\n                           className={\"sublabel hallThrusterOffSublabelPos hideWhenTooSmall\"}>\r\n                        {hallThrusterSecondaryOnText}\r\n                        <p><b id={\"guideText\"}>Click on the cathode to learn more about</b></p>\r\n                    </label>\r\n                </div>\r\n\r\n                <div id={\"hallThrusterNameLabelDiv\"}>\r\n                    <label id={\"hallThrusterNameLabel\"}\r\n                           className={\"titleLabel hallThrusterNameTitleLabelPos hideWhenTooSmall\"}> Hall Thruster\r\n                    </label>\r\n                </div>\r\n\r\n                <div id={\"hallThrusterNameSublabelDiv\"}>\r\n                    <label id={\"hallThrusterNameSublabel\"}\r\n                           className={\"sublabel hallThrusterNameSublabelPos hideWhenTooSmall\"}>\r\n                        {hallThrusterPrimaryText}\r\n                    </label>\r\n                </div>\r\n\r\n                <div id={\"learningModeGuide\"} className={\"sublabel hideWhenTooSmall\"}>{this.state.text}</div>\r\n\r\n                <div id={\"toggleButtonGroup\"} className={\"stackedButtonGroup bottomrightAlign hideWhenTooSmall\"} style={{display: \"block\"}}>\r\n                    <button id={\"HeatInsertToggle\"}\r\n                            className={\"button\"}\r\n                            style={{display: \"block\"}}\r\n                            onClick={this.HeatInsertToggle_HandleClick}> Toggle Heaters\r\n                    </button>\r\n                    <button id={\"GasFeedToggle\"}\r\n                            className={\"button\"}\r\n                            style={{display: \"block\"}}\r\n                            onClick={this.GasFeedToggle_HandleClick}> Toggle Gas Feed\r\n                    </button>\r\n                    <button id={\"KeeperElectrodeToggle\"}\r\n                            className={\"button\"}\r\n                            style={{display: \"block\"}}\r\n                            onClick={this.KeeperElectrodeToggle_HandleClick}> Toggle Keeper Electrode\r\n                    </button>\r\n                </div>\r\n                <button id={\"nextButton\"}\r\n                        className={\"button stackedButtonGroup hideWhenTooSmall bottomrightAlign\"}\r\n                        style={{display: \"none\"}}> Next\r\n                </button>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LearningMode;","import React from \"react\";\r\nimport Painter from \"./Painter\";\r\nimport ReactDOM from \"react-dom\";\r\nimport {base, hallThrusterOff} from \"./Galactic\";\r\nimport PresMode from \"./PresMode\";\r\nimport LearningMode from \"./LearningMode\";\r\n\r\n/**\r\n * Site landing page element\r\n * Should be rendered inside a <div id={\"canvasHolder\"}>\r\n */\r\nexport class LandingPage extends React.Component {\r\n    constructor(props) {\r\n        super();\r\n\r\n        // create a reference to the canvas element\r\n        this.canvas = React.createRef();\r\n    }\r\n\r\n    /**\r\n     * componentDidMount()\r\n     * Called when canvas element is mounted on page (canvas element is unusable up until this point)\r\n     */\r\n    componentDidMount() {\r\n        // initialize instance variables for each canvas element/layer\r\n        const ctx0 = this.canvas.current.getContext('2d'); // base = 0;\r\n\r\n        this.layers = [ctx0];\r\n        this.painter = new Painter(this.layers);\r\n\r\n        this.showElement(\"landingPageTitleDiv\")\r\n        this.showElement(\"landingPageSubTitleDiv\")\r\n        this.showElement(\"landingPageLModePromptDiv\")\r\n\r\n        this.LearningMode_HandleClick = this.LearningMode_HandleClick.bind(this);\r\n        this.PresMode_HandleClick = this.PresMode_HandleClick.bind(this);\r\n    }\r\n\r\n    /**\r\n     * getLayer(layer)\r\n     * @param layer layer number which you want to get\r\n     * @returns ctx 2d canvas context for that layer\r\n     */\r\n    getLayer(layer){\r\n        return this.layers[layer];\r\n    }\r\n\r\n    /**\r\n     * LearningMode_HandleClick()\r\n     * Onclick handler for the learning mode button on the landing page\r\n     */\r\n    LearningMode_HandleClick() {\r\n\r\n        // render learning mode\r\n        ReactDOM.render(\r\n            <div id={\"canvasHolder\"}>\r\n                <LearningMode id={\"LearningMode\"} deltastage={hallThrusterOff} scene={[false,false,false,false,false,false,true,false]}/>\r\n            </div>,\r\n            document.getElementById('root')\r\n        );\r\n    }\r\n\r\n    /**\r\n     * PresMode_HandleClick()\r\n     * Onclick handler for the learning mode button on the landing page\r\n     */\r\n    PresMode_HandleClick() {\r\n\r\n        // render learning mode\r\n        ReactDOM.render(\r\n            <div id={\"canvasHolder\"}>\r\n                <PresMode id={\"presMode\"} deltastage={base} scene={[true,false,false,false,false,false,false,false]}/>\r\n            </div>,\r\n            document.getElementById('root')\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Hides the element with the given id\r\n     * @param elementId id of element to hide\r\n     */\r\n    hideElement(elementId){\r\n        //document.getElementById(elementId).style.visibility = 'hidden';\r\n        document.getElementById(elementId).style.display = 'none';\r\n    }\r\n    /**\r\n     * Un-hides the element with the given id\r\n     * @param elementId id of element to show\r\n     */\r\n    showElement(elementId){\r\n        // document.getElementById(elementId).style.visibility = 'visible';\r\n        document.getElementById(elementId).style.display = 'flex';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className={\"showWhenTooSmall\"}>\r\n                    <p>\r\n                        Your window size is too small for this visualization.\r\n                        Please increase your window size before continuing.\r\n                    </p>\r\n                </div>\r\n                <div className={\"hideWhenTooSmall\"}>\r\n                    <canvas id={\"canvas\"}\r\n                            onClick={this.LearningMode_HandleClick}\r\n                            ref={this.canvas}\r\n                            className={\"unselectable\"}\r\n                            hidden={true}> You need a better browser :(\r\n                    </canvas>\r\n                    <img id={'spaceshipImage'} src={\"/images/spacecraft2.png\"} className={\"grow unselectable\"} alt={\"Psyche 16 spacecraft\"} onClick={this.LearningMode_HandleClick}/>\r\n\r\n                    <div className={\"stackedButtonGroup bottomrightAlign\"}>\r\n                        <button id={\"PresModeButton\"}\r\n                                className={\"button\"}\r\n                                onClick={this.PresMode_HandleClick}> Presentation Mode\r\n                        </button>\r\n                    </div>\r\n\r\n                    <div id={\"landingPageTitleDiv\"} className={\"stackedButtonGroup landingPageTitleAlign\"} >\r\n                        <label id={\"landingPageTitle\"} className={\"landingPageTitleLabel\"}> Hollow Cathode </label>\r\n                    </div>\r\n\r\n                    <div id={\"landingPageSubTitleDiv\"} className={\"stackedButtonGroup landingPageSubTitleAlign\"} >\r\n                        <label id={\"landingPageSubTitle\"} className={\"landingPageSubTitleLabel\"}> Visualization </label>\r\n                    </div>\r\n\r\n                    <div id={\"landingPageLModePromptDiv\"} className={\"stackedButtonGroup landingPageLModePromptAlign\"} >\r\n                        <label id={\"landingPageLModePrompt\"} className={\"landingPageLModePromptLabel\"}> click the spacecraft to begin </label>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LandingPage;","import './App.css';\r\nimport './landingPage.css';\r\nimport React from 'react';\r\n\r\nimport LandingPage from \"./LandingPage\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div>\r\n            <div id={\"canvasHolder\"}>\r\n                <LandingPage id={\"LandingPage\"}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}